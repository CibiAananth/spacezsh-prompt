#!/usr/bin/env zsh
# vim: ft=zsh fdm=marker foldlevel=0 sw=2 ts=2 sts=2 et

# Load functions for sections defined in prompt order arrays
#
# @args
#   $1 - prompt/rpromp/""
sz::load_sections() {
  local -a alignments=("prompt" "rprompt")
  local -a raw_sections section_meta
  local sections_var section raw_section
  local load_async=false

  # [[ -n $1 ]] && alignments=("$1")

  for alignment in "${alignments[@]}"; do
    # Reset related cache
    _SS_DATA[${alignment}_raw_sections]=""
    _SS_DATA[${alignment}_sections]=""

    sections_var="SPACESHIP_${(U)alignment}_ORDER"
    raw_sections=(${(P)sections_var})
    for raw_section in "${(@)raw_sections}"; do
      # Split by double-colon
      section_meta=(${(s.::.)raw_section})
      # First value is always section name
      section=${section_meta[1]}

      # Cache sections
      for tag in ${section_meta[2,-1]}; do
        # Special Case: Remember that async lib should be loaded
        if [[ "$tag" == "async" ]]; then
          _sz_async_sections[${section}]="true"
          load_async=true
        elif [[ "$tag" == "custom" ]]; then
          _sz_custom_sections[${section}]="true"
        fi
      done

      # Prefer custom section over same name builtin section
      if sz::func_defined "sz::${section}"; then
        # Custom section is declared, nothing else to do
        continue
      elif (( ${_sz_custom_sections[(Ie)${section}]} )) \
        && [[ -f "${SPACESHIP_CUSTOM_SECTION_LOCATION}/sz::${section}" ]]; then
        track-sz-autoload "sz::${section}"
      elif [[ -f "$SPACESHIP_ROOT/sections/sz::${section}" ]]; then
        track-sz-autoload "sz::${section}"
      else
        # file not found!
        # If this happens, we remove the section from the configured elements,
        # so that we avoid printing errors over and over.
        print -P "%F{yellow}Warning!%f The '%F{cyan}${section}%f' section was not found. Removing it from the prompt."
        SPACESHIP_PROMPT_ORDER=("${(@)SPACESHIP_PROMPT_ORDER:#${raw_section}}")
        SPACESHIP_RPROMPT_ORDER=("${(@)SPACESHIP_RPROMPT_ORDER:#${raw_section}}")
        unset "_sz_async_sections[${section}]"
        unset "_sz_custom_sections[${section}]"
      fi
    done

    # Cache configured sections! As nested arrays are not really possible,
    # store as single string, separated by whitespace.
    # Cache the raw_sections after invalid ones are removed
    raw_sections=(${(P)sections_var})
    _SS_DATA[${alignment}_raw_sections]="${raw_sections[*]}"
    _SS_DATA[${alignment}_sections]="${raw_sections[@]%::*}"
  done

  # Load Async libs at last, because before initializing
  # ZSH-Async, all functions must be defined.
  if ${load_async}; then
    _SS_DATA[async]=true
    # Avoid duplicate sourcing and loading of zsh-async by checking flag ASYNC_INIT_DONE
    (( ASYNC_INIT_DONE )) || { autoload -Uz +X async && async }
  fi
}

sz::load_sections "$@"
