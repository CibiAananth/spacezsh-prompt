#!/usr/bin/env zsh
# vim: ft=zsh fdm=marker foldlevel=0 sw=2 ts=2 sts=2 et

# Spaceship Render function.
# Goes through cache and renders each entry.
#
# @args
#   $1 - prompt/rprompt
function sz::render {
  local RPROMPT_PREFIX RPROMPT_SUFFIX
  local -a alignments=("prompt" "rprompt")
  local -a section_meta
  local alignment section cache_key

  [[ -n $1 ]] && alignments=("$1")

  for alignment in "${alignments[@]}"; do
    [[ ${#_SS_DATA[${alignment}_sections]} == "0" ]] && continue

    # Reset prompt storage
    _sz_unsafe[$alignment]=""

    for section in ${(s/ /)_SS_DATA[${alignment}_sections]}; do
      cache_key="${alignment}::${section}"
      section_meta=("${(@s:·|·:)${_sz_section_cache[${cache_key}]}}")
      # [[ -z "${section_meta[3]}" ]] && continue # Skip if section is empty
      _sz_unsafe[$alignment]+="${section_meta[3]}"
    done

    # left/right specific
    if [[ $alignment == "prompt" ]]; then
      # Fix iTerm integration in async mode
      if [[ "${ITERM_SHELL_INTEGRATION_INSTALLED:-}" == "Yes" ]]; then
        # Disable default prompt marker added by iTerm2 integration and add it
        # manually during each async rendering
        ITERM2_SHOULD_DECORATE_PROMPT=""
        _sz_unsafe[prompt]="%{$(iterm2_prompt_mark)%}${_sz_unsafe[prompt]}%{$(iterm2_prompt_end)%}"
      fi

      local NEWLINE=$'\n'

      [[ "$SPACESHIP_PROMPT_ADD_NEWLINE" == true ]] \
        && _sz_unsafe[prompt]="$NEWLINE${_sz_unsafe[prompt]}"

      # By evaluating $_sz_unsafe[prompt] here in __sz_render we avoid
      # the evaluation of $PROMPT being interrupted.
      # For security $PROMPT is never set directly. This way the prompt render is
      # forced to evaluate the variable and the contents of $_sz_unsafe[prompt]
      # are never executed. The same applies to $RPROMPT.
      PROMPT='${_sz_unsafe[prompt]}'
    else
      if [[ "$SPACESHIP_RPROMPT_ADD_NEWLINE" != true ]]; then
        # The right prompt should be on the same line as the first line of the left
        # prompt. To do so, there is just a quite ugly workaround: Before zsh draws
        # the RPROMPT, we advise it, to go one line up. At the end of RPROMPT, we
        # advise it to go one line down. See:
        # http://superuser.com/questions/357107/zsh-right-justify-in-ps1
        RPROMPT_PREFIX='%{'$'\e[1A''%}' # one line up
        RPROMPT_SUFFIX='%{'$'\e[1B''%}' # one line down
        _sz_unsafe[rprompt]="${RPROMPT_PREFIX}${_sz_unsafe[rprompt]}${RPROMPT_SUFFIX}"
      fi
      RPROMPT='${_sz_unsafe[rprompt]}'
    fi
  done
}

sz::render "$@"
