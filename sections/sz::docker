#!/usr/bin/env zsh
# vim: ft=zsh fdm=marker foldlevel=0 sw=2 ts=2 sts=2 et

#
# Docker
#
# Docker automates the repetitive tasks of setting up development environments
# Link: https://www.docker.com

# ------------------------------------------------------------------------------
# Configuration
# ------------------------------------------------------------------------------

SPACESHIP_DOCKER_SHOW="${SPACESHIP_DOCKER_SHOW=true}"
SPACESHIP_DOCKER_PREFIX="${SPACESHIP_DOCKER_PREFIX="on "}"
SPACESHIP_DOCKER_SUFFIX="${SPACESHIP_DOCKER_SUFFIX="$SPACESHIP_PROMPT_DEFAULT_SUFFIX"}"
SPACESHIP_DOCKER_SYMBOL="${SPACESHIP_DOCKER_SYMBOL="🐳 "}"
SPACESHIP_DOCKER_COLOR="${SPACESHIP_DOCKER_COLOR="cyan"}"
SPACESHIP_DOCKER_VERBOSE="${SPACESHIP_DOCKER_VERBOSE=false}"

SPACESHIP_DOCKER_CONTEXT_SHOW="${SPACESHIP_DOCKER_CONTEXT_SHOW=true}"
SPACESHIP_DOCKER_CONTEXT_PREFIX="${SPACESHIP_DOCKER_CONTEXT_PREFIX="("}"
SPACESHIP_DOCKER_CONTEXT_SUFFIX="${SPACESHIP_DOCKER_CONTEXT_SUFFIX=")"}"

# ------------------------------------------------------------------------------
# Section
# ------------------------------------------------------------------------------

sz::docker_compose_file_exists() {
  [[ -n "$COMPOSE_FILE" ]] || return 1

  # Better support for docker environment vars: https://docs.docker.com/compose/reference/envvars/

  # Use COMPOSE_PATH_SEPARATOR or colon as default
  local separator=${COMPOSE_PATH_SEPARATOR:-":"}

  # COMPOSE_FILE may have several filenames separated by colon, test all of them
  local filenames=("${(@ps/$separator/)COMPOSE_FILE}")

  # Must ensure all compose files exist
  # https://github.com/docker/docker.github.io/issues/5472
  for filename in $filenames; do
    if ! sz::upsearch "$filename" >/dev/null; then
      return 1
    fi
  done
  return 0
}

# Show current Docker version and connected machine
sz::docker() {
  [[ $SPACESHIP_DOCKER_SHOW == "false" && $SPACESHIP_DOCKER_CONTEXT_SHOW == "false" ]] && return

  (( $+commands[docker] )) || return

  # Show Docker status only for Docker-specific folders or when connected to external host
  sz::upsearch "Dockerfile" >/dev/null \
    || sz::upsearch "docker-compose.yml" >/dev/null \
    || sz::docker_compose_file_exists \
    || [[ -f "/.dockerenv" ]] \
    || return

  # if docker daemon isn't running you'll get an error saying it can't connect
  local docker_version=$(docker version -f "{{.Server.Version}}" 2>/dev/null)
  # [[ -z $docker_version ]] && return

  [[ $SPACESHIP_DOCKER_VERBOSE == false ]] && docker_version=${docker_version%-*}

  [[ -n $docker_version ]] && docker_version="v${docker_version}"

  if [[ $SPACESHIP_DOCKER_CONTEXT_SHOW == "true" ]]; then
    local docker_remote_context=''
    # Docker has three different ways to work on remote Docker hosts:
    #  1. docker-machine
    #  2. DOCKER_HOST environment variable
    #  3. docker context (since Docker 19.03)
    if [[ -n $DOCKER_MACHINE_NAME ]]; then
      docker_remote_context="$DOCKER_MACHINE_NAME"
    elif [[ -n $DOCKER_HOST ]]; then
      # Remove protocol (tcp://) and port number from displayed Docker host
      docker_remote_context="${docker_remote_context#*://}"
      # docker_remote_context=" via (${docker_remote_context%:*})"
      docker_remote_context="${docker_remote_context%:*}"
    else
      # Docker contexts can be set using either the DOCKER_CONTEXT environment variable
      # or the `docker context use` command. `docker context ls` will show the selected
      # context in both cases. But we are not interested in the local "default" context.
      docker_remote_context=$(docker context ls --format '{{if .Current}}{{if ne .Name "default"}}{{.Name}}{{end}}{{end}}' 2>/dev/null)
      docker_remote_context=${docker_remote_context//$'\n'}
    fi
    [[ -n $docker_remote_context ]] && \
      docker_remote_context="${SPACESHIP_DOCKER_CONTEXT_PREFIX}${docker_remote_context}${SPACESHIP_DOCKER_CONTEXT_SUFFIX}" 
  fi
  
  if [[ -z $docker_version && -z $docker_remote_context ]]; then
    return
  elif [[ -n $docker_version && -n $docker_remote_context ]]; then
    docker_remote_context=" $docker_remote_context"
  fi

  sz::section \
    "$SPACESHIP_DOCKER_COLOR" \
    "${SPACESHIP_DOCKER_SYMBOL}${docker_version}${docker_remote_context}" \
    "$SPACESHIP_DOCKER_PREFIX" \
    "$SPACESHIP_DOCKER_SUFFIX"
}

sz::docker "$@"
