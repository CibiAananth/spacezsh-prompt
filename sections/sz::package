#!/usr/bin/env zsh
# vim: ft=zsh fdm=marker foldlevel=0 sw=2 ts=2 sts=2 et

#
# Package
#
# Current package version.
# These package managers supported:
#   * NPM
#   * Cargo

# ------------------------------------------------------------------------------
# Configuration
# ------------------------------------------------------------------------------

SPACESHIP_PACKAGE_SHOW="${SPACESHIP_PACKAGE_SHOW=true}"
SPACESHIP_PACKAGE_PREFIX="${SPACESHIP_PACKAGE_PREFIX="is "}"
SPACESHIP_PACKAGE_SUFFIX="${SPACESHIP_PACKAGE_SUFFIX="$SPACESHIP_PROMPT_DEFAULT_SUFFIX"}"
SPACESHIP_PACKAGE_SYMBOL="${SPACESHIP_PACKAGE_SYMBOL="ðŸ“¦ "}"
SPACESHIP_PACKAGE_COLOR="${SPACESHIP_PACKAGE_COLOR="red"}"

# ------------------------------------------------------------------------------
# Section
# ------------------------------------------------------------------------------

sz::package() {
  [[ $SPACESHIP_PACKAGE_SHOW == false ]] && return

  # Show package version only when repository is a package
  local 'package_version'

  if sz::upsearch "package.json" >/dev/null \
    && (( $+commands[npm] )); then
    if (( $+commands[jq] )); then
      package_version=$(jq -r '.version' package.json 2>/dev/null)
    elif (( $+commands[python] )); then
      package_version=$(python -c "import json; print(json.load(open('package.json'))['version'])" 2>/dev/null)
    elif (( $+commands[node] )); then
      package_version=$(node -p "require('./package.json').version" 2> /dev/null)
    fi
  fi

  if sz::upsearch "Cargo.toml" >/dev/null \
    && (( $+commands[cargo] )); then
    # Handle missing field `version` in Cargo.toml.
    # `cargo pkgid` need Cargo.lock exists too. If it does't, do not show package version
    # https://github.com/denysdovhan/spaceship-prompt/pull/617
    local pkgid=$(cargo pkgid 2>&1)
    <<< $pkgid grep -q "error:" || package_version=${pkgid##*\#}
  fi

  [[ -z $package_version || "$package_version" == "null" || "$package_version" == "undefined" ]] && return

  sz::section \
    "$SPACESHIP_PACKAGE_COLOR" \
    "${SPACESHIP_PACKAGE_SYMBOL}v${package_version}" \
    "$SPACESHIP_PACKAGE_PREFIX" \
    "$SPACESHIP_PACKAGE_SUFFIX"
}

sz::package "$@"
