#!/usr/bin/env zsh
# vim: ft=zsh fdm=marker foldlevel=0 sw=2 ts=2 sts=2 et

#
# python
#

# ------------------------------------------------------------------------------
# Configuration
# ------------------------------------------------------------------------------

SPACESHIP_PYTHON_SHOW="${SPACESHIP_PYTHON_SHOW=true}"
SPACESHIP_PYTHON_PREFIX="${SPACESHIP_PYTHON_PREFIX="$SPACESHIP_PROMPT_DEFAULT_PREFIX"}"
SPACESHIP_PYTHON_SUFFIX="${SPACESHIP_PYTHON_SUFFIX="$SPACESHIP_PROMPT_DEFAULT_SUFFIX"}"
SPACESHIP_PYTHON_SYMBOL="${SPACESHIP_PYTHON_SYMBOL="🐍 "}"
SPACESHIP_PYTHON_COLOR="${SPACESHIP_PYTHON_COLOR="blue"}"

SPACESHIP_CONDA_SYMBOL="${SPACESHIP_CONDA_SYMBOL="🅒 "}"
SPACESHIP_CONDA_VERBOSE="${SPACESHIP_CONDA_VERBOSE=true}"

# The (A) expansion flag creates an array, the '=' activates word splitting
SPACESHIP_VENV_GENERIC_NAMES="${(A)=SPACESHIP_VENV_GENERIC_NAMES=virtualenv venv .venv}"

# ------------------------------------------------------------------------------
# Section
# ------------------------------------------------------------------------------

sz::python() {
  [[ $SPACESHIP_PYTHON_SHOW == false ]] && return

  local env_type env_symbol env_status

  env_symbol="${SPACESHIP_PYTHON_SYMBOL}"

  if [[ -n $CONDA_DEFAULT_ENV ]] && (( $+commands[conda] )); then
    env_type="conda"
    env_symbol="${SPACESHIP_CONDA_SYMBOL}"
    if [[ $SPACESHIP_CONDA_VERBOSE == false ]]; then
      env_status=${CONDA_DEFAULT_ENV:t}
    else
      env_status=${CONDA_DEFAULT_ENV}
    fi

  elif [[ -n $VIRTUAL_ENV ]]; then
    if [[ -n $PIPENV_ACTIVE ]]; then
      env_type="pipenv"
    elif [[ -n $POETRY_ACTIVE ]]; then
      env_type="poetry"
    else
      env_type="venv"
    fi
    if [[ "${SPACESHIP_VENV_GENERIC_NAMES[(i)$VIRTUAL_ENV:t]}" -le \
          "${#SPACESHIP_VENV_GENERIC_NAMES}" ]]
    then
      env_status="$VIRTUAL_ENV:h:t"
    else
      env_status="$VIRTUAL_ENV:t"
    fi

  # Tools modifying PATH prioritize pyenv, which is based on shim
  elif (( $+commands[pyenv] )) && {[[ -n "$PYENV_VERSION" ]] \
    || sz::upsearch ".python-version" >/dev/null}; then
    env_type="pyenv"
    env_status=${$(pyenv version-name 2>/dev/null)//:/ }

  # Under dir with python files, but no venv is activated
  elif sz::upsearch "environment.yml" >/dev/null \
    || sz::upsearch "Pipfile" >/dev/null \
    || sz::upsearch "pyproject.toml" >/dev/null \
    || sz::upsearch "requirements.txt" >/dev/null \
    || [[ -n *.py(#qN^/) ]]; then
    # Fallback: pyenv global
    env_type="fallback"
    if [[ -z $env_status ]] && (( $+commands[pyenv] )); then
      env_status=${$(pyenv global 2>/dev/null)//:/ }
    fi
  fi

  [[ -n $env_status ]] || return

  sz::section \
    "$SPACESHIP_PYTHON_COLOR" \
    "${env_symbol}${env_status}" \
    "$SPACESHIP_PYTHON_PREFIX" \
    "$SPACESHIP_PYTHON_SUFFIX"
}

sz::python "$@"
